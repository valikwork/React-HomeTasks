{"version":3,"sources":["tasks/week-6/redux/reducers.js","tasks/week-6/redux/actions.js","tasks/week-6/redux/store.js","tasks/week-6/components/GistsList.js","tasks/week-6/components/GistInfo.js","tasks/week-6/components/GistOwnerInfo.js","tasks/week-6/Gists.js","tasks/week-6/GistsApp.js","App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","selectedGist","state","action","type","wholeGistInfo","gistUrl","payload","raw_url","ownerLogin","gists","isLoading","items","error","selectedGistContent","gist","gistOwner","info","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","GistsList","useSelector","dispatch","useDispatch","useEffect","axios","get","then","res","data","catch","err","message","files","map","item","filename","Object","values","language","owner","login","id","Container","List","file","Item","onClick","key","GistInfo","url","keys","length","syntaxHighlighterWrapper","content","style","docco","JSON","stringify","GistOwnerInfo","Card","Image","src","avatar_url","wrapped","ui","Content","Header","Meta","className","created_at","Description","bio","extra","Icon","name","public_repos","href","html_url","Gists","Grid","Row","columns","Column","GistsApp","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5d1d1694.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { FETCH_GISTS_REQUEST, \r\n        FETCH_GISTS_SUCCESS, \r\n        FETCH_GISTS_ERROR, \r\n        SELECT_GIST, \r\n        FETCH_SELECTED_GIST_REQUEST, \r\n        FETCH_SELECTED_GIST_SUCCESS, \r\n        FETCH_SELECTED_GIST_ERROR ,\r\n        FETCH_GIST_OWNER_REQUEST,\r\n        FETCH_GIST_OWNER_SUCCESS,\r\n        FETCH_GIST_OWNER_ERROR\r\n    } from './actions';\r\n\r\n\r\nfunction selectedGistReducer(state = {}, action) {\r\n    switch(action.type) {\r\n        case SELECT_GIST:\r\n            let wholeGistInfo = {\r\n                gistUrl: action.payload.raw_url,\r\n                ownerLogin: action.payload.ownerLogin\r\n            }\r\n            return wholeGistInfo;\r\n        default: \r\n            return state;    \r\n    }\r\n}\r\n\r\nfunction gistsReducer(state = {\r\n    isLoading: false,\r\n    items: [],\r\n    error: ''\r\n}, action) {\r\n    switch(action.type) {\r\n        case FETCH_GISTS_REQUEST:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                isLoading: true\r\n            }\r\n        case FETCH_GISTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                items: action.payload\r\n            }\r\n        case FETCH_GISTS_ERROR:   \r\n            return {\r\n                isLoading: false,\r\n                items: [],\r\n                error: action.payload\r\n            }\r\n        default: return state;   \r\n    }\r\n}\r\n\r\nfunction selectedGistsContentReducer(state = {\r\n    isLoading: false,\r\n    gist: '',\r\n    error: ''\r\n}, action) {\r\n    switch(action.type) {\r\n        case FETCH_SELECTED_GIST_REQUEST:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                isLoading: true\r\n            }\r\n        case FETCH_SELECTED_GIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                gist: action.payload\r\n            }\r\n        case FETCH_SELECTED_GIST_ERROR:   \r\n            return {\r\n                isLoading: false,\r\n                gist: '',\r\n                error: action.payload\r\n            }\r\n        default: return state;   \r\n    }\r\n}\r\n\r\nfunction gistOwnerReducer(state = {\r\n    isLoading: false,\r\n    info: {},\r\n    error: ''\r\n}, action) {\r\n    switch(action.type) {\r\n        case FETCH_GIST_OWNER_REQUEST:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                isLoading: true\r\n            }\r\n        case FETCH_GIST_OWNER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                info: action.payload\r\n            }\r\n        case FETCH_GIST_OWNER_ERROR:   \r\n            return {\r\n                isLoading: false,\r\n                info: [],\r\n                error: action.payload\r\n            }\r\n        default: return state;   \r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    selectedGist: selectedGistReducer,\r\n    gists: gistsReducer,\r\n    selectedGistContent: selectedGistsContentReducer,\r\n    gistOwner: gistOwnerReducer\r\n})\r\n\r\nexport default rootReducer;","import axios from 'axios';\r\n\r\nexport const FETCH_GISTS_REQUEST = 'FETCH_GISTS_REQUEST';\r\nexport const FETCH_GISTS_SUCCESS = 'FETCH_GISTS_SUCCESS';\r\nexport const FETCH_GISTS_ERROR = 'FETCH_GISTS_ERROR';\r\n\r\nexport const FETCH_SELECTED_GIST_REQUEST = 'FETCH_SELECTED_GIST_REQUEST';\r\nexport const FETCH_SELECTED_GIST_SUCCESS = 'FETCH_SELECTED_GIST_SUCCESS';\r\nexport const FETCH_SELECTED_GIST_ERROR = 'FETCH_SELECTED_GIST_ERROR';\r\n\r\nexport const FETCH_GIST_OWNER_REQUEST = 'FETCH_GIST_OWNER_REQUEST';\r\nexport const FETCH_GIST_OWNER_SUCCESS = 'FETCH_GIST_OWNER_SUCCESS';\r\nexport const FETCH_GIST_OWNER_ERROR = 'FETCH_GIST_OWNER_ERROR';\r\n\r\nexport const SELECT_GIST = 'SELECT_GIST'\r\n\r\n\r\nexport function selectGist(gist) {\r\n    return {\r\n        type: SELECT_GIST,\r\n        payload: gist\r\n    }\r\n}\r\n\r\nconst fetchGistsRequests = () => ({\r\n    type: FETCH_GISTS_REQUEST\r\n});\r\n\r\nconst fetchGistsSuccess = response => ({\r\n    type: FETCH_GISTS_SUCCESS,\r\n    payload: response.data\r\n});\r\n\r\nconst fetchGistsError = error => ({\r\n    type: FETCH_GISTS_ERROR,\r\n    payload: error.message\r\n});\r\n\r\nexport function fetchAllGists(){\r\n    return dispatch => {\r\n        dispatch(fetchGistsRequests())\r\n        axios.get('https://api.github.com/gists/public')\r\n            .then(res => dispatch(fetchGistsSuccess(res)))\r\n            .catch(err => dispatch(fetchGistsError(err)))\r\n    }\r\n}\r\n\r\nconst fetchSelectedGistRequest = () => ({\r\n    type: FETCH_SELECTED_GIST_REQUEST\r\n});\r\n\r\nconst fetchSelectedGistSuccess = response => ({\r\n    type: FETCH_SELECTED_GIST_SUCCESS,\r\n    payload: response.data\r\n});\r\n\r\nconst fetchSelectedGistError = error => ({\r\n    type: FETCH_SELECTED_GIST_ERROR,\r\n    payload: error.message\r\n});\r\n\r\nexport function fetchSelectedGist(url){\r\n    return dispatch => {\r\n        dispatch(fetchSelectedGistRequest())\r\n        axios.get(url)\r\n            .then(res => dispatch(fetchSelectedGistSuccess(res)))\r\n            .catch(err => dispatch(fetchSelectedGistError(err)))\r\n    }\r\n}\r\n\r\nconst fetchGistOwnerRequest = () => ({\r\n    type: FETCH_GIST_OWNER_REQUEST\r\n})\r\nconst fetchGistOwnerSuccess = response => ({\r\n    type: FETCH_GIST_OWNER_SUCCESS,\r\n    payload: response.data\r\n})\r\nconst fetchGistOwnerError = error => ({\r\n    type: FETCH_GIST_OWNER_SUCCESS,\r\n    payload: error.message\r\n})\r\n\r\nexport function fetchGistOwner(ownerLogin){\r\n    return dispatch => {\r\n        dispatch(fetchGistOwnerRequest())\r\n        axios.get(`https://api.github.com/users/${ownerLogin}`)\r\n            .then(res => dispatch(fetchGistOwnerSuccess(res)))\r\n            .catch(err => dispatch(fetchGistOwnerError(err)))\r\n    }\r\n}","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);\r\n\r\nexport default store;\r\n\r\n","import React, { useEffect } from 'react'\r\nimport { Container, List } from 'semantic-ui-react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { fetchAllGists, selectGist } from '../redux/actions';\r\n\r\nexport default function GistsList() {\r\n    const gists = useSelector(state => state.gists);\r\n    const { isLoading, items } = gists;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchAllGists())\r\n    }, [])\r\n\r\n    const files = items.map((item) => {\r\n        return {\r\n            filename: Object.values(item.files)[0]['filename'],\r\n            language: Object.values(item.files)[0]['language'],\r\n            raw_url: Object.values(item.files)[0]['raw_url'],\r\n            ownerLogin: item.owner.login,\r\n            id: item.id\r\n        } \r\n    });\r\n    \r\n    return (\r\n        <Container>\r\n            {isLoading && <h1>Loading...</h1>}\r\n            <List>\r\n                {files.map((file) => {\r\n                    return <List.Item onClick={() => dispatch(selectGist(file))} key={file.id}>{file.filename}</List.Item>\r\n                })}\r\n            </List>\r\n        </Container>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Container } from 'semantic-ui-react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchSelectedGist } from '../redux/actions';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nexport default function GistInfo() {\r\n    const selectedGist = useSelector(state => state.selectedGist);\r\n    const selectedGistContent = useSelector(state => state.selectedGistContent);\r\n    const { isLoading, gist } = selectedGistContent;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(selectedGist).length > 0){\r\n            dispatch(fetchSelectedGist(selectedGist.gistUrl))\r\n        }\r\n    }, [selectedGist])\r\n\r\n    const syntaxHighlighterWrapper = (content) => {\r\n        return (\r\n            <SyntaxHighlighter style={docco}>\r\n                {content}\r\n            </SyntaxHighlighter>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Container>\r\n                {isLoading ? \r\n                <h1>Loading...</h1> : \r\n                gist === '' ? 'Choose a Gist' : typeof gist === 'string' ? syntaxHighlighterWrapper(gist) : syntaxHighlighterWrapper(JSON.stringify(gist, null, 4))\r\n                }\r\n        </Container>\r\n    )\r\n}\r\n","import React,{ useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Container, Card, Icon, Image } from 'semantic-ui-react';\r\nimport { fetchGistOwner } from '../redux/actions';\r\n\r\nexport default function GistOwnerInfo() {\r\n    const selectedGist = useSelector(state => state.selectedGist);\r\n    const gistOwner = useSelector(state => state.gistOwner);\r\n    const { isLoading, info } = gistOwner;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(selectedGist).length > 0){\r\n            dispatch(fetchGistOwner(selectedGist.ownerLogin))\r\n        }\r\n    }, [selectedGist])\r\n    \r\n    return (\r\n        <Container>\r\n            {Object.keys(selectedGist).length === 0 ?\r\n            'Choose a Gist' :\r\n            isLoading ? <h1>Loading...</h1> :\r\n            <Card>\r\n                <Image src={info.avatar_url} wrapped ui={false} />\r\n                <Card.Content>\r\n                    <Card.Header>{info.login}</Card.Header>\r\n                    <Card.Meta>\r\n                        <span className='date'>Created at {info.created_at}</span>\r\n                    </Card.Meta>\r\n                    <Card.Description>\r\n                        {info.bio}\r\n                    </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                <a>\r\n                    <Icon name='user' />\r\n                    {info.public_repos} Public Repos\r\n                </a>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                <a href={info.html_url}>\r\n                    <Icon name='github' />\r\n                    Visit Owners GitHub \r\n                </a>\r\n                </Card.Content>\r\n            </Card>\r\n            }\r\n            \r\n            \r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Container, Grid } from 'semantic-ui-react';\r\nimport GistsList from './components/GistsList';\r\nimport GistInfo from './components/GistInfo';\r\nimport GistOwnerInfo from './components/GistOwnerInfo';\r\n\r\nexport default function Gists() {\r\n    return (\r\n        <Container>\r\n            <Grid>\r\n                <Grid.Row columns={3}>\r\n                    <Grid.Column>\r\n                        <GistsList />\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <GistInfo />\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <GistOwnerInfo />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store'\r\nimport Gists from './Gists';\r\n\r\nexport default function GistsApp() {\r\n    return (\r\n        <Provider store={store}>\r\n            <Gists />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n//import StoreApp from './tasks/week-5/StoreApp';\r\nimport GistsApp from './tasks/week-6/GistsApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n        <GistsApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}